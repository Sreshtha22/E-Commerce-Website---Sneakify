{"ast":null,"code":"import { useCallback, useDebugValue, useRef } from 'react';\nimport { createReduxContextHook, useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { ReactReduxContext } from '../components/Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStoreWithSelector = notInitialized;\nexport const initializeUseSelector = fn => {\n  useSyncExternalStoreWithSelector = fn;\n};\n\nconst refEquality = (a, b) => a === b;\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook() {\n  let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;\n  const useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : createReduxContextHook(context);\n  return function useSelector(selector) {\n    let equalityFnOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      equalityFn = refEquality,\n      stabilityCheck = undefined,\n      noopCheck = undefined\n    } = typeof equalityFnOrOptions === 'function' ? {\n      equalityFn: equalityFnOrOptions\n    } : equalityFnOrOptions;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n\n      if (typeof equalityFn !== 'function') {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n\n    const {\n      store,\n      subscription,\n      getServerState,\n      stabilityCheck: globalStabilityCheck,\n      noopCheck: globalNoopCheck\n    } = useReduxContext();\n    const firstRun = useRef(true);\n    const wrappedSelector = useCallback({\n      [selector.name](state) {\n        const selected = selector(state);\n\n        if (process.env.NODE_ENV !== 'production') {\n          const finalStabilityCheck = typeof stabilityCheck === 'undefined' ? globalStabilityCheck : stabilityCheck;\n\n          if (finalStabilityCheck === 'always' || finalStabilityCheck === 'once' && firstRun.current) {\n            const toCompare = selector(state);\n\n            if (!equalityFn(selected, toCompare)) {\n              let stack = undefined;\n\n              try {\n                throw new Error();\n              } catch (e) {\n                ;\n                ({\n                  stack\n                } = e);\n              }\n\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' + '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization', {\n                state,\n                selected,\n                selected2: toCompare,\n                stack\n              });\n            }\n          }\n\n          const finalNoopCheck = typeof noopCheck === 'undefined' ? globalNoopCheck : noopCheck;\n\n          if (finalNoopCheck === 'always' || finalNoopCheck === 'once' && firstRun.current) {\n            // @ts-ignore\n            if (selected === state) {\n              let stack = undefined;\n\n              try {\n                throw new Error();\n              } catch (e) {\n                ;\n                ({\n                  stack\n                } = e);\n              }\n\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned the root state when called. This can lead to unnecessary rerenders.' + '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.', {\n                stack\n              });\n            }\n          }\n\n          if (firstRun.current) firstRun.current = false;\n        }\n\n        return selected;\n      }\n\n    }[selector.name], [selector, globalStabilityCheck, stabilityCheck]);\n    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport const useSelector = /*#__PURE__*/createSelectorHook();","map":{"version":3,"names":["useCallback","useDebugValue","useRef","createReduxContextHook","useReduxContext","useDefaultReduxContext","ReactReduxContext","notInitialized","useSyncExternalStoreWithSelector","initializeUseSelector","fn","refEquality","a","b","createSelectorHook","context","useSelector","selector","equalityFnOrOptions","equalityFn","stabilityCheck","undefined","noopCheck","process","env","NODE_ENV","Error","store","subscription","getServerState","globalStabilityCheck","globalNoopCheck","firstRun","wrappedSelector","name","state","selected","finalStabilityCheck","current","toCompare","stack","e","console","warn","selected2","finalNoopCheck","selectedState","addNestedSub","getState"],"sources":["C:/Users/sresh/OneDrive/Desktop/ecom/node_modules/react-redux/es/hooks/useSelector.js"],"sourcesContent":["import { useCallback, useDebugValue, useRef } from 'react';\nimport { createReduxContextHook, useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { ReactReduxContext } from '../components/Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStoreWithSelector = notInitialized;\nexport const initializeUseSelector = fn => {\n  useSyncExternalStoreWithSelector = fn;\n};\n\nconst refEquality = (a, b) => a === b;\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook(context = ReactReduxContext) {\n  const useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : createReduxContextHook(context);\n  return function useSelector(selector, equalityFnOrOptions = {}) {\n    const {\n      equalityFn = refEquality,\n      stabilityCheck = undefined,\n      noopCheck = undefined\n    } = typeof equalityFnOrOptions === 'function' ? {\n      equalityFn: equalityFnOrOptions\n    } : equalityFnOrOptions;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n\n      if (typeof equalityFn !== 'function') {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n\n    const {\n      store,\n      subscription,\n      getServerState,\n      stabilityCheck: globalStabilityCheck,\n      noopCheck: globalNoopCheck\n    } = useReduxContext();\n    const firstRun = useRef(true);\n    const wrappedSelector = useCallback({\n      [selector.name](state) {\n        const selected = selector(state);\n\n        if (process.env.NODE_ENV !== 'production') {\n          const finalStabilityCheck = typeof stabilityCheck === 'undefined' ? globalStabilityCheck : stabilityCheck;\n\n          if (finalStabilityCheck === 'always' || finalStabilityCheck === 'once' && firstRun.current) {\n            const toCompare = selector(state);\n\n            if (!equalityFn(selected, toCompare)) {\n              let stack = undefined;\n\n              try {\n                throw new Error();\n              } catch (e) {\n                ;\n                ({\n                  stack\n                } = e);\n              }\n\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' + '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization', {\n                state,\n                selected,\n                selected2: toCompare,\n                stack\n              });\n            }\n          }\n\n          const finalNoopCheck = typeof noopCheck === 'undefined' ? globalNoopCheck : noopCheck;\n\n          if (finalNoopCheck === 'always' || finalNoopCheck === 'once' && firstRun.current) {\n            // @ts-ignore\n            if (selected === state) {\n              let stack = undefined;\n\n              try {\n                throw new Error();\n              } catch (e) {\n                ;\n                ({\n                  stack\n                } = e);\n              }\n\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned the root state when called. This can lead to unnecessary rerenders.' + '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.', {\n                stack\n              });\n            }\n          }\n\n          if (firstRun.current) firstRun.current = false;\n        }\n\n        return selected;\n      }\n\n    }[selector.name], [selector, globalStabilityCheck, stabilityCheck]);\n    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport const useSelector = /*#__PURE__*/createSelectorHook();"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,aAAtB,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,sBAAT,EAAiCC,eAAe,IAAIC,sBAApD,QAAkF,mBAAlF;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,IAAIC,gCAAgC,GAAGD,cAAvC;AACA,OAAO,MAAME,qBAAqB,GAAGC,EAAE,IAAI;EACzCF,gCAAgC,GAAGE,EAAnC;AACD,CAFM;;AAIP,MAAMC,WAAW,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,KAAKC,CAApC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASC,kBAAT,GAAyD;EAAA,IAA7BC,OAA6B,uEAAnBT,iBAAmB;EAC9D,MAAMF,eAAe,GAAGW,OAAO,KAAKT,iBAAZ,GAAgCD,sBAAhC,GAAyDF,sBAAsB,CAACY,OAAD,CAAvG;EACA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAAyD;IAAA,IAA1BC,mBAA0B,uEAAJ,EAAI;IAC9D,MAAM;MACJC,UAAU,GAAGR,WADT;MAEJS,cAAc,GAAGC,SAFb;MAGJC,SAAS,GAAGD;IAHR,IAIF,OAAOH,mBAAP,KAA+B,UAA/B,GAA4C;MAC9CC,UAAU,EAAED;IADkC,CAA5C,GAEAA,mBANJ;;IAQA,IAAIK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAI,CAACR,QAAL,EAAe;QACb,MAAM,IAAIS,KAAJ,CAAW,yCAAX,CAAN;MACD;;MAED,IAAI,OAAOT,QAAP,KAAoB,UAAxB,EAAoC;QAClC,MAAM,IAAIS,KAAJ,CAAW,uDAAX,CAAN;MACD;;MAED,IAAI,OAAOP,UAAP,KAAsB,UAA1B,EAAsC;QACpC,MAAM,IAAIO,KAAJ,CAAW,iEAAX,CAAN;MACD;IACF;;IAED,MAAM;MACJC,KADI;MAEJC,YAFI;MAGJC,cAHI;MAIJT,cAAc,EAAEU,oBAJZ;MAKJR,SAAS,EAAES;IALP,IAMF3B,eAAe,EANnB;IAOA,MAAM4B,QAAQ,GAAG9B,MAAM,CAAC,IAAD,CAAvB;IACA,MAAM+B,eAAe,GAAGjC,WAAW,CAAC;MAClC,CAACiB,QAAQ,CAACiB,IAAV,EAAgBC,KAAhB,EAAuB;QACrB,MAAMC,QAAQ,GAAGnB,QAAQ,CAACkB,KAAD,CAAzB;;QAEA,IAAIZ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;UACzC,MAAMY,mBAAmB,GAAG,OAAOjB,cAAP,KAA0B,WAA1B,GAAwCU,oBAAxC,GAA+DV,cAA3F;;UAEA,IAAIiB,mBAAmB,KAAK,QAAxB,IAAoCA,mBAAmB,KAAK,MAAxB,IAAkCL,QAAQ,CAACM,OAAnF,EAA4F;YAC1F,MAAMC,SAAS,GAAGtB,QAAQ,CAACkB,KAAD,CAA1B;;YAEA,IAAI,CAAChB,UAAU,CAACiB,QAAD,EAAWG,SAAX,CAAf,EAAsC;cACpC,IAAIC,KAAK,GAAGnB,SAAZ;;cAEA,IAAI;gBACF,MAAM,IAAIK,KAAJ,EAAN;cACD,CAFD,CAEE,OAAOe,CAAP,EAAU;gBACV;gBACA,CAAC;kBACCD;gBADD,IAEGC,CAFJ;cAGD;;cAEDC,OAAO,CAACC,IAAR,CAAa,eAAe1B,QAAQ,CAACiB,IAAT,IAAiB,SAAhC,IAA6C,4GAA7C,GAA4J,sLAAzK,EAAiW;gBAC/VC,KAD+V;gBAE/VC,QAF+V;gBAG/VQ,SAAS,EAAEL,SAHoV;gBAI/VC;cAJ+V,CAAjW;YAMD;UACF;;UAED,MAAMK,cAAc,GAAG,OAAOvB,SAAP,KAAqB,WAArB,GAAmCS,eAAnC,GAAqDT,SAA5E;;UAEA,IAAIuB,cAAc,KAAK,QAAnB,IAA+BA,cAAc,KAAK,MAAnB,IAA6Bb,QAAQ,CAACM,OAAzE,EAAkF;YAChF;YACA,IAAIF,QAAQ,KAAKD,KAAjB,EAAwB;cACtB,IAAIK,KAAK,GAAGnB,SAAZ;;cAEA,IAAI;gBACF,MAAM,IAAIK,KAAJ,EAAN;cACD,CAFD,CAEE,OAAOe,CAAP,EAAU;gBACV;gBACA,CAAC;kBACCD;gBADD,IAEGC,CAFJ;cAGD;;cAEDC,OAAO,CAACC,IAAR,CAAa,eAAe1B,QAAQ,CAACiB,IAAT,IAAiB,SAAhC,IAA6C,+EAA7C,GAA+H,8IAA5I,EAA4R;gBAC1RM;cAD0R,CAA5R;YAGD;UACF;;UAED,IAAIR,QAAQ,CAACM,OAAb,EAAsBN,QAAQ,CAACM,OAAT,GAAmB,KAAnB;QACvB;;QAED,OAAOF,QAAP;MACD;;IAzDiC,EA2DlCnB,QAAQ,CAACiB,IA3DyB,CAAD,EA2DjB,CAACjB,QAAD,EAAWa,oBAAX,EAAiCV,cAAjC,CA3DiB,CAAnC;IA4DA,MAAM0B,aAAa,GAAGtC,gCAAgC,CAACoB,YAAY,CAACmB,YAAd,EAA4BpB,KAAK,CAACqB,QAAlC,EAA4CnB,cAAc,IAAIF,KAAK,CAACqB,QAApE,EAA8Ef,eAA9E,EAA+Fd,UAA/F,CAAtD;IACAlB,aAAa,CAAC6C,aAAD,CAAb;IACA,OAAOA,aAAP;EACD,CA9FD;AA+FD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAM9B,WAAW,GAAG,aAAaF,kBAAkB,EAAnD"},"metadata":{},"sourceType":"module"}