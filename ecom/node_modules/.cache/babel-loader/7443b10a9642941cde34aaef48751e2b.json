{"ast":null,"code":"import axios from \"axios\";\nconst userUrl = 'http://localhost:8090';\nexport const signupCust = async cust => {\n  try {\n    const response = await axios.post(`${userUrl}/cust`, cust);\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.status === 409) {\n      console.log('Error while calling signupCust Api ', error.message);\n      throw new Error('Email already exists');\n    } else {\n      console.log('Error while calling signupCust Api ', error.message);\n      throw new Error('Failed to connect to the server. Please try again later.');\n    }\n  }\n};\nexport const contactUs = async contact => {\n  try {\n    const response = await axios.post(`${userUrl}/contact`, contact);\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.status === 409) {\n      console.log('Error while calling contactUs Api ', error.message);\n      throw new Error('Email does not exist');\n    } else {\n      console.log('Error while calling contactUs Api ', error.message);\n      throw new Error('Failed to connect to the server. Please try again later.');\n    }\n  }\n};\nexport const addProduct = async product => {\n  try {\n    const response = await axios.post(`${userUrl}/product`, product, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error while calling addProduct API ', error.message);\n    throw new Error('Failed to add product. Please try again later.');\n  }\n};\nexport const fetchContacts = async () => {\n  try {\n    const response = await fetch(`${uer}/contacts`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n};\nexport const updateQueryStatus = async (queryId, newStatus) => {\n  try {\n    const response = await fetch(`${BASE_URL}/updateQueryStatus/${queryId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status: newStatus\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to update query status');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating query status:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","userUrl","signupCust","cust","response","post","data","error","status","console","log","message","Error","contactUs","contact","addProduct","product","headers","fetchContacts","fetch","uer","ok","json","updateQueryStatus","queryId","newStatus","BASE_URL","method","body","JSON","stringify"],"sources":["C:/Users/sresh/OneDrive/Desktop/ecom/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\nconst userUrl = 'http://localhost:8090';\r\n\r\nexport const signupCust = async (cust) => {\r\n    try {\r\n        const response = await axios.post(`${userUrl}/cust`, cust);\r\n        return response.data;\r\n    } catch (error) {\r\n        if (error.response && error.response.status === 409) {\r\n            console.log('Error while calling signupCust Api ', error.message);\r\n            throw new Error('Email already exists');\r\n        } else {\r\n            console.log('Error while calling signupCust Api ', error.message);\r\n            throw new Error('Failed to connect to the server. Please try again later.');\r\n        }\r\n    }\r\n}\r\nexport const contactUs = async (contact) => {\r\n    try {\r\n        const response = await axios.post(`${userUrl}/contact`, contact);\r\n        return response.data;\r\n    } catch (error) {\r\n        if (error.response && error.response.status === 409) {\r\n            console.log('Error while calling contactUs Api ', error.message);\r\n            throw new Error('Email does not exist');\r\n        } else {\r\n            console.log('Error while calling contactUs Api ', error.message);\r\n            throw new Error('Failed to connect to the server. Please try again later.');\r\n        }\r\n    }\r\n}\r\n\r\nexport const addProduct = async (product) => {\r\n    try {\r\n        const response = await axios.post(`${userUrl}/product`, product, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error while calling addProduct API ', error.message);\r\n        throw new Error('Failed to add product. Please try again later.');\r\n    }\r\n}\r\n\r\nexport const fetchContacts = async () => {\r\n    try {\r\n        const response = await fetch(`${uer}/contacts`);\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const updateQueryStatus = async (queryId, newStatus) => {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/updateQueryStatus/${queryId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ status: newStatus })\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Failed to update query status');\r\n        }\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error updating query status:', error);\r\n        throw error;\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}