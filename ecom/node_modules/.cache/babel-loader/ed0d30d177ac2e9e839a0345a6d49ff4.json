{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sresh\\\\OneDrive\\\\Desktop\\\\ecom\\\\src\\\\components\\\\ContactUsForm.jsx\",\n    _s = $RefreshSig$();\n\n// import React from \"react\";\n// import { Field, reduxForm } from \"redux-form\";\n// import { compose } from \"redux\";\n// import { useState } from \"react\";\n// import {\n//   renderFormGroupField,\n//   renderFormTextArea,\n// } from \"../helpers/renderForm\";\n// import {\n//   required,\n//   maxLength50,\n//   name,\n//   maxLengthMobileNo,\n//   minLengthMobileNo,\n//   digit,\n//   email,\n//   maxLength1000,\n// } from \"../helpers/validation\";\n// import { contactUs } from \"../api.js\";\n// const initialValues = {\n//   name: '',\n//   email: '',\n//   phno: '',\n//   msg: ''\n// }\n// const ContactUsForm = (props) => {\n//   const [contact, setContact] = useState(initialValues)\n//   const [isError, setIsError] = useState(false);\n//   // const [isEmailNotValid, setIsEmailNotValid] = useState(false);\n//   const [isSent, setIsSent] = useState(false);\n//   const onValueChange = (e) => {\n//     setContact({ ...contact, [e.target.name]: e.target.value })\n//     console.log(contact)\n//   }\n//   const addContact = async () => {\n//     const allFieldsFilled = Object.values(contact).every(value => value.trim() !== '');\n//     if (!allFieldsFilled) {\n//       return;\n//     }\n//   const addContact=async(e)=>{\n//     e.preventDefault();\n//     try {\n//       await contactUs(contact.email);\n//       setIsSent(true);\n//       setIsError(false);\n//       // setIsEmailNotValid(false);\n//       setTimeout(() => {\n//         setIsSent(false);\n//         props.reset();\n//       }, 2000);\n//     } catch (error) {\n//       setIsSent(false);\n//       if (error.message === 'Invalid email address') {\n//         // setIsEmailNotValid(true);\n//         setTimeout(() => {\n//           props.reset();\n//         }, 2000);\n//       } else {\n//         setIsError(true);\n//         setTimeout(() => {\n//           setIsError(false); \n//           props.reset();\n//         }, 2000);\n//       }  \n//     }\n//   }\n// };\n//   const {handleSubmit, submitting, submitFailed } = props;\n//   return (\n//     <div>\n//     <form\n//       onSubmit={props.handleSubmit(addContact)}\n//       className={`needs-validation ${submitFailed ? \"was-validated\" : \"\"}`}\n//       noValidate\n//     >\n//       <div className=\"row\">\n//         <div className=\"col-md-12\">\n//           <Field\n//             name=\"name\"\n//             type=\"text\"\n//             label=\"Name\"\n//             title=\"Please enter your name\"\n//             component={renderFormGroupField}\n//             placeholder=\"Enter full name\"\n//             required={true}\n//             validate={[required, name]}\n//             pattern=\"[a-zA-Z\\s]*\"\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <div className=\"row\">\n//         <div className=\"col-md-6\">\n//           <Field\n//             name=\"phno\"\n//             type=\"tel\"\n//             label=\"Mobile No.\"\n//             title=\"Please enter your valid mobile number\"\n//             component={renderFormGroupField}\n//             placeholder=\"Enter mobile no. without country code\"\n//             validate={[required, maxLengthMobileNo, minLengthMobileNo, digit]}\n//             required={true}\n//             pattern=\"^[0-9]{10,10}$\"\n//             max=\"9999999999\"\n//             min=\"9999999999\"\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//         <div className=\"col-md-6\">\n//           <Field\n//             name=\"email\"\n//             type=\"email\"\n//             label=\"Email address\"\n//             component={renderFormGroupField}\n//             title=\"Please enter your valid email address\"\n//             placeholder=\"Enter email address\"\n//             pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n//             validate={[required, maxLength50, email]}\n//             required={true}\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <div className=\"row g-3\">\n//         <div className=\"col-md-12\">\n//           <Field\n//             name=\"msg\"\n//             label=\"Message\"\n//             component={renderFormTextArea}\n//             validate={maxLength1000}\n//             placeholder=\"What are you looking for?\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <br></br>\n//       {isError && <h6 className=\"text-center text-danger\">Failed to Send Message!</h6>}\n//       {/* {isEmailNotValid && <h6 className=\"text-center\">Invalid email address!</h6>} */}\n//       {isSent && <h6 className=\"text-center text-success\">Successfully Sent Message!</h6>}\n//       <div className=\"d-grid\" style={{marginTop:'14px'}}>\n//         <button\n//           type=\"submit\"\n//           className=\"btn btn-primary mt-3\"\n//           disabled={submitting}\n//           // onClick={()=>addContact()}\n//           style={{backgroundColor:\"black\", border:\"1px solid black\"}}\n//         >\n//           Submit\n//         </button>\n//       </div>\n//     </form>\n//     </div>\n//   );\n// };\n// export default compose(\n//   reduxForm({\n//     form: \"Contactus\",\n//     initialValues\n//   })\n// )(ContactUsForm);\n// import React, { useState } from \"react\";\n// import { Field, reduxForm } from \"redux-form\";\n// import { compose } from \"redux\";\n// import {\n//   renderFormGroupField,\n//   renderFormTextArea,\n// } from \"../helpers/renderForm\";\n// import {\n//   required,\n//   maxLength50,\n//   name,\n//   maxLengthMobileNo,\n//   minLengthMobileNo,\n//   digit,\n//   email,\n//   maxLength1000,\n// } from \"../helpers/validation\";\n// import { contactUs } from \"../api.js\";\n// const initialValues = {\n//   name: \"\",\n//   email: \"\",\n//   phno: \"\",\n//   msg: \"\",\n// };\n// const ContactUsForm = (props) => {\n//   const [isError, setIsError] = useState(false);\n//   const [isSent, setIsSent] = useState(false);\n//   const addContact = async (formData) => {\n//     try {\n//       await contactUs(formData); \n//       setIsSent(true);\n//       setIsError(false);\n//       setTimeout(() => {\n//         setIsSent(false);\n//         props.reset();\n//       }, 2000);\n//     } catch (error) {\n//       setIsSent(false);\n//       setIsError(true);\n//       setTimeout(() => {\n//         setIsError(false);\n//       }, 2000);\n//     }\n//   };\n//   const { handleSubmit, submitting, submitFailed } = props;\n//   const onSubmit = (formData) => {\n//     addContact(formData); \n//   };\n//   return (\n//     <div>\n//       <form\n//         onSubmit={handleSubmit(onSubmit)}\n//         className={`needs-validation ${submitFailed ? \"was-validated\" : \"\"}`}\n//         noValidate\n//       >\n//                <div className=\"row\">\n//          <div className=\"col-md-12\">\n//            <Field\n//             name=\"name\"\n//             type=\"text\"\n//             label=\"Name\"\n//             title=\"Please enter your name\"\n//             component={renderFormGroupField}\n//             placeholder=\"Enter full name\"\n//             required={true}\n//             validate={[required, name]}\n//             pattern=\"[a-zA-Z\\s]*\"\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <div className=\"row\">\n//         <div className=\"col-md-6\">\n//           <Field\n//             name=\"phno\"\n//             type=\"tel\"\n//             label=\"Mobile No.\"\n//             title=\"Please enter your valid mobile number\"\n//             component={renderFormGroupField}\n//             placeholder=\"Enter mobile no. without country code\"\n//             validate={[required, maxLengthMobileNo, minLengthMobileNo, digit]}\n//             required={true}\n//             pattern=\"^[0-9]{10,10}$\"\n//             max=\"9999999999\"\n//             min=\"9999999999\"\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//         <div className=\"col-md-6\">\n//           <Field\n//             name=\"email\"\n//             type=\"email\"\n//             label=\"Email address\"\n//             component={renderFormGroupField}\n//             title=\"Please enter your valid email address\"\n//             placeholder=\"Enter email address\"\n//             pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n//             validate={[required, maxLength50, email]}\n//             required={true}\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <div className=\"row g-3\">\n//         <div className=\"col-md-12\">\n//           <Field\n//             name=\"msg\"\n//             label=\"Message\"\n//             component={renderFormTextArea}\n//             validate={maxLength1000}\n//             placeholder=\"What are you looking for?\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <br></br>\n//         {isError && (\n//           <h6 className=\"text-center text-danger\">Failed to Send Message!</h6>\n//         )}\n//         {isSent && (\n//           <h6 className=\"text-center text-success\">\n//             Successfully Sent Message!\n//           </h6>\n//         )}\n//         <div className=\"d-grid\" style={{ marginTop: \"14px\" }}>\n//           <button\n//             type=\"submit\"\n//             className=\"btn btn-primary mt-3\"\n//             disabled={submitting}\n//             style={{ backgroundColor: \"black\", border: \"1px solid black\" }}\n//           >\n//             Submit\n//           </button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n// export default compose(\n//   reduxForm({\n//     form: \"Contactus\",\n//     initialValues,\n//   })\n// )(ContactUsForm);\nimport React, { useState } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { compose } from \"redux\";\nimport { renderFormGroupField, renderFormTextArea } from \"../helpers/renderForm\";\nimport { required, maxLength50, name, maxLengthMobileNo, minLengthMobileNo, digit, email, maxLength1000 } from \"../helpers/validation\";\nimport { contactUs } from \"../api.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  name: \"\",\n  email: \"\",\n  phno: \"\",\n  msg: \"\"\n};\n\nconst ContactUsForm = props => {\n  _s();\n\n  const [isError, setIsError] = useState(false);\n  const [isSent, setIsSent] = useState(false);\n  const [contact, setContact] = useState(initialValues);\n\n  const onValueChange = e => {\n    setContact({ ...contact,\n      [e.target.name]: e.target.value\n    });\n    console.log(contact);\n  };\n\n  const addContact = async () => {\n    const allFieldsFilled = Object.values(contact).every(value => value.trim() !== '');\n\n    if (!allFieldsFilled) {\n      return;\n    }\n\n    try {\n      await contactUs(contact);\n      setIsSent(true);\n      setIsError(false);\n    } catch (error) {\n      setIsSent(false);\n      setIsError(true);\n    }\n  };\n\n  const {\n    handleSubmit,\n    submitting,\n    submitFailed\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(addContact),\n      className: `needs-validation ${submitFailed ? \"was-validated\" : \"\"}`,\n      noValidate: true,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: /*#__PURE__*/_jsxDEV(Field, {\n            name: \"name\",\n            type: \"text\",\n            label: \"Name\",\n            title: \"Please enter your name\",\n            component: renderFormGroupField,\n            placeholder: \"Enter full name\",\n            required: true,\n            validate: [required, name],\n            pattern: \"[a-zA-Z\\\\s]*\",\n            className: \"mb-3\",\n            onChange: e => onValueChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: /*#__PURE__*/_jsxDEV(Field, {\n            name: \"phno\",\n            type: \"tel\",\n            label: \"Mobile No.\",\n            title: \"Please enter your valid mobile number\",\n            component: renderFormGroupField,\n            placeholder: \"Enter mobile no. without country code\",\n            validate: [required, maxLengthMobileNo, minLengthMobileNo, digit],\n            required: true,\n            pattern: \"^[0-9]{10,10}$\",\n            max: \"9999999999\",\n            min: \"9999999999\",\n            className: \"mb-3\",\n            onChange: e => onValueChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: /*#__PURE__*/_jsxDEV(Field, {\n            name: \"email\",\n            type: \"email\",\n            label: \"Email address\",\n            component: renderFormGroupField,\n            title: \"Please enter your valid email address\",\n            placeholder: \"Enter email address\",\n            pattern: \"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,}$\",\n            validate: [required, maxLength50, email],\n            required: true,\n            className: \"mb-3\",\n            onChange: e => onValueChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row g-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: /*#__PURE__*/_jsxDEV(Field, {\n            name: \"msg\",\n            label: \"Message\",\n            component: renderFormTextArea,\n            validate: maxLength1000,\n            placeholder: \"What are you looking for?\",\n            onChange: e => onValueChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this), isError && /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"text-center text-danger\",\n        children: \"Failed to Send Message!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this), isSent && /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"text-center text-success\",\n        children: \"Successfully Sent Message!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-grid\",\n        style: {\n          marginTop: \"14px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary mt-3\",\n          disabled: submitting,\n          style: {\n            backgroundColor: \"black\",\n            border: \"1px solid black\"\n          },\n          onClick: () => addContact(),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactUsForm, \"8CIHQNKk9aKuvG+TDgdEQ5WO4AM=\");\n\n_c = ContactUsForm;\nexport default compose(reduxForm({\n  form: \"Contactus\",\n  initialValues\n}))(ContactUsForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactUsForm\");","map":{"version":3,"names":["React","useState","Field","reduxForm","compose","renderFormGroupField","renderFormTextArea","required","maxLength50","name","maxLengthMobileNo","minLengthMobileNo","digit","email","maxLength1000","contactUs","initialValues","phno","msg","ContactUsForm","props","isError","setIsError","isSent","setIsSent","contact","setContact","onValueChange","e","target","value","console","log","addContact","allFieldsFilled","Object","values","every","trim","error","handleSubmit","submitting","submitFailed","marginTop","backgroundColor","border","form"],"sources":["C:/Users/sresh/OneDrive/Desktop/ecom/src/components/ContactUsForm.jsx"],"sourcesContent":["// import React from \"react\";\n// import { Field, reduxForm } from \"redux-form\";\n// import { compose } from \"redux\";\n// import { useState } from \"react\";\n// import {\n//   renderFormGroupField,\n//   renderFormTextArea,\n// } from \"../helpers/renderForm\";\n// import {\n//   required,\n//   maxLength50,\n//   name,\n//   maxLengthMobileNo,\n//   minLengthMobileNo,\n//   digit,\n//   email,\n//   maxLength1000,\n// } from \"../helpers/validation\";\n// import { contactUs } from \"../api.js\";\n// const initialValues = {\n//   name: '',\n//   email: '',\n//   phno: '',\n//   msg: ''\n// }\n// const ContactUsForm = (props) => {\n//   const [contact, setContact] = useState(initialValues)\n//   const [isError, setIsError] = useState(false);\n//   // const [isEmailNotValid, setIsEmailNotValid] = useState(false);\n//   const [isSent, setIsSent] = useState(false);\n//   const onValueChange = (e) => {\n//     setContact({ ...contact, [e.target.name]: e.target.value })\n//     console.log(contact)\n//   }\n//   const addContact = async () => {\n//     const allFieldsFilled = Object.values(contact).every(value => value.trim() !== '');\n//     if (!allFieldsFilled) {\n//       return;\n//     }\n//   const addContact=async(e)=>{\n//     e.preventDefault();\n//     try {\n//       await contactUs(contact.email);\n//       setIsSent(true);\n//       setIsError(false);\n//       // setIsEmailNotValid(false);\n//       setTimeout(() => {\n//         setIsSent(false);\n//         props.reset();\n//       }, 2000);\n//     } catch (error) {\n//       setIsSent(false);\n//       if (error.message === 'Invalid email address') {\n//         // setIsEmailNotValid(true);\n//         setTimeout(() => {\n//           props.reset();\n//         }, 2000);\n//       } else {\n//         setIsError(true);\n//         setTimeout(() => {\n//           setIsError(false); \n//           props.reset();\n//         }, 2000);\n//       }  \n//     }\n//   }\n// };\n//   const {handleSubmit, submitting, submitFailed } = props;\n//   return (\n//     <div>\n//     <form\n//       onSubmit={props.handleSubmit(addContact)}\n//       className={`needs-validation ${submitFailed ? \"was-validated\" : \"\"}`}\n//       noValidate\n//     >\n//       <div className=\"row\">\n//         <div className=\"col-md-12\">\n//           <Field\n//             name=\"name\"\n//             type=\"text\"\n//             label=\"Name\"\n//             title=\"Please enter your name\"\n//             component={renderFormGroupField}\n//             placeholder=\"Enter full name\"\n//             required={true}\n//             validate={[required, name]}\n//             pattern=\"[a-zA-Z\\s]*\"\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <div className=\"row\">\n//         <div className=\"col-md-6\">\n//           <Field\n//             name=\"phno\"\n//             type=\"tel\"\n//             label=\"Mobile No.\"\n//             title=\"Please enter your valid mobile number\"\n//             component={renderFormGroupField}\n//             placeholder=\"Enter mobile no. without country code\"\n//             validate={[required, maxLengthMobileNo, minLengthMobileNo, digit]}\n//             required={true}\n//             pattern=\"^[0-9]{10,10}$\"\n//             max=\"9999999999\"\n//             min=\"9999999999\"\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//         <div className=\"col-md-6\">\n//           <Field\n//             name=\"email\"\n//             type=\"email\"\n//             label=\"Email address\"\n//             component={renderFormGroupField}\n//             title=\"Please enter your valid email address\"\n//             placeholder=\"Enter email address\"\n//             pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n//             validate={[required, maxLength50, email]}\n//             required={true}\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <div className=\"row g-3\">\n//         <div className=\"col-md-12\">\n//           <Field\n//             name=\"msg\"\n//             label=\"Message\"\n//             component={renderFormTextArea}\n//             validate={maxLength1000}\n//             placeholder=\"What are you looking for?\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <br></br>\n//       {isError && <h6 className=\"text-center text-danger\">Failed to Send Message!</h6>}\n//       {/* {isEmailNotValid && <h6 className=\"text-center\">Invalid email address!</h6>} */}\n//       {isSent && <h6 className=\"text-center text-success\">Successfully Sent Message!</h6>}\n//       <div className=\"d-grid\" style={{marginTop:'14px'}}>\n//         <button\n//           type=\"submit\"\n//           className=\"btn btn-primary mt-3\"\n//           disabled={submitting}\n//           // onClick={()=>addContact()}\n//           style={{backgroundColor:\"black\", border:\"1px solid black\"}}\n//         >\n//           Submit\n//         </button>\n//       </div>\n//     </form>\n//     </div>\n//   );\n// };\n// export default compose(\n//   reduxForm({\n//     form: \"Contactus\",\n//     initialValues\n//   })\n// )(ContactUsForm);\n\n\n// import React, { useState } from \"react\";\n// import { Field, reduxForm } from \"redux-form\";\n// import { compose } from \"redux\";\n// import {\n//   renderFormGroupField,\n//   renderFormTextArea,\n// } from \"../helpers/renderForm\";\n// import {\n//   required,\n//   maxLength50,\n//   name,\n//   maxLengthMobileNo,\n//   minLengthMobileNo,\n//   digit,\n//   email,\n//   maxLength1000,\n// } from \"../helpers/validation\";\n// import { contactUs } from \"../api.js\";\n// const initialValues = {\n//   name: \"\",\n//   email: \"\",\n//   phno: \"\",\n//   msg: \"\",\n// };\n// const ContactUsForm = (props) => {\n//   const [isError, setIsError] = useState(false);\n//   const [isSent, setIsSent] = useState(false);\n//   const addContact = async (formData) => {\n//     try {\n//       await contactUs(formData); \n//       setIsSent(true);\n//       setIsError(false);\n//       setTimeout(() => {\n//         setIsSent(false);\n//         props.reset();\n//       }, 2000);\n//     } catch (error) {\n//       setIsSent(false);\n//       setIsError(true);\n//       setTimeout(() => {\n//         setIsError(false);\n//       }, 2000);\n//     }\n//   };\n//   const { handleSubmit, submitting, submitFailed } = props;\n//   const onSubmit = (formData) => {\n//     addContact(formData); \n//   };\n//   return (\n//     <div>\n//       <form\n//         onSubmit={handleSubmit(onSubmit)}\n//         className={`needs-validation ${submitFailed ? \"was-validated\" : \"\"}`}\n//         noValidate\n//       >\n//                <div className=\"row\">\n//          <div className=\"col-md-12\">\n//            <Field\n//             name=\"name\"\n//             type=\"text\"\n//             label=\"Name\"\n//             title=\"Please enter your name\"\n//             component={renderFormGroupField}\n//             placeholder=\"Enter full name\"\n//             required={true}\n//             validate={[required, name]}\n//             pattern=\"[a-zA-Z\\s]*\"\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <div className=\"row\">\n//         <div className=\"col-md-6\">\n//           <Field\n//             name=\"phno\"\n//             type=\"tel\"\n//             label=\"Mobile No.\"\n//             title=\"Please enter your valid mobile number\"\n//             component={renderFormGroupField}\n//             placeholder=\"Enter mobile no. without country code\"\n//             validate={[required, maxLengthMobileNo, minLengthMobileNo, digit]}\n//             required={true}\n//             pattern=\"^[0-9]{10,10}$\"\n//             max=\"9999999999\"\n//             min=\"9999999999\"\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//         <div className=\"col-md-6\">\n//           <Field\n//             name=\"email\"\n//             type=\"email\"\n//             label=\"Email address\"\n//             component={renderFormGroupField}\n//             title=\"Please enter your valid email address\"\n//             placeholder=\"Enter email address\"\n//             pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n//             validate={[required, maxLength50, email]}\n//             required={true}\n//             className=\"mb-3\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <div className=\"row g-3\">\n//         <div className=\"col-md-12\">\n//           <Field\n//             name=\"msg\"\n//             label=\"Message\"\n//             component={renderFormTextArea}\n//             validate={maxLength1000}\n//             placeholder=\"What are you looking for?\"\n//             onChange={(e)=> onValueChange(e)}\n//           />\n//         </div>\n//       </div>\n//       <br></br>\n//         {isError && (\n//           <h6 className=\"text-center text-danger\">Failed to Send Message!</h6>\n//         )}\n//         {isSent && (\n//           <h6 className=\"text-center text-success\">\n//             Successfully Sent Message!\n//           </h6>\n//         )}\n//         <div className=\"d-grid\" style={{ marginTop: \"14px\" }}>\n//           <button\n//             type=\"submit\"\n//             className=\"btn btn-primary mt-3\"\n//             disabled={submitting}\n//             style={{ backgroundColor: \"black\", border: \"1px solid black\" }}\n//           >\n//             Submit\n//           </button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n// export default compose(\n//   reduxForm({\n//     form: \"Contactus\",\n//     initialValues,\n//   })\n// )(ContactUsForm);\n\n\nimport React, { useState } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { compose } from \"redux\";\nimport {\n  renderFormGroupField,\n  renderFormTextArea,\n} from \"../helpers/renderForm\";\nimport {\n  required,\n  maxLength50,\n  name,\n  maxLengthMobileNo,\n  minLengthMobileNo,\n  digit,\n  email,\n  maxLength1000,\n} from \"../helpers/validation\";\nimport { contactUs } from \"../api.js\";\nconst initialValues = {\n  name: \"\",\n  email: \"\",\n  phno: \"\",\n  msg: \"\",\n};\nconst ContactUsForm = (props) => {\n  const [isError, setIsError] = useState(false);\n  const [isSent, setIsSent] = useState(false);\n  const [contact, setContact] = useState(initialValues); \n  const onValueChange = (e) => {\n    setContact({ ...contact, [e.target.name]: e.target.value });\n    console.log(contact)\n  };\n  const addContact = async () => {\n    const allFieldsFilled = Object.values(contact).every(value => value.trim() !== '');\n    if (!allFieldsFilled) {\n      return;\n    }\n    try {\n      await contactUs(contact); \n      setIsSent(true);\n      setIsError(false);\n    } catch (error) {\n      setIsSent(false);\n      setIsError(true);\n    }\n};\n  const { handleSubmit, submitting, submitFailed } = props;\n  return (\n    <div>\n      <form\n        onSubmit={handleSubmit(addContact)}\n        className={`needs-validation ${submitFailed ? \"was-validated\" : \"\"}`}\n        noValidate\n      >\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Field\n              name=\"name\"\n              type=\"text\"\n              label=\"Name\"\n              title=\"Please enter your name\"\n              component={renderFormGroupField}\n              placeholder=\"Enter full name\"\n              required={true}\n              validate={[required, name]}\n              pattern=\"[a-zA-Z\\s]*\"\n              className=\"mb-3\"\n              onChange={(e) => onValueChange(e)}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Field\n              name=\"phno\"\n              type=\"tel\"\n              label=\"Mobile No.\"\n              title=\"Please enter your valid mobile number\"\n              component={renderFormGroupField}\n              placeholder=\"Enter mobile no. without country code\"\n              validate={[required, maxLengthMobileNo, minLengthMobileNo, digit]}\n              required={true}\n              pattern=\"^[0-9]{10,10}$\"\n              max=\"9999999999\"\n              min=\"9999999999\"\n              className=\"mb-3\"\n              onChange={(e) => onValueChange(e)}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <Field\n              name=\"email\"\n              type=\"email\"\n              label=\"Email address\"\n              component={renderFormGroupField}\n              title=\"Please enter your valid email address\"\n              placeholder=\"Enter email address\"\n              pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n              validate={[required, maxLength50, email]}\n              required={true}\n              className=\"mb-3\"\n              onChange={(e) => onValueChange(e)}\n            />\n          </div>\n        </div>\n        <div className=\"row g-3\">\n          <div className=\"col-md-12\">\n            <Field\n              name=\"msg\"\n              label=\"Message\"\n              component={renderFormTextArea}\n              validate={maxLength1000}\n              placeholder=\"What are you looking for?\"\n              onChange={(e) => onValueChange(e)}\n            />\n          </div>\n        </div>\n        <br></br>\n        {isError && (\n          <h6 className=\"text-center text-danger\">Failed to Send Message!</h6>\n        )}\n        {isSent && (\n          <h6 className=\"text-center text-success\">\n            Successfully Sent Message!\n          </h6>\n        )}\n        <div className=\"d-grid\" style={{ marginTop: \"14px\" }}>\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary mt-3\"\n            disabled={submitting}\n            style={{ backgroundColor: \"black\", border: \"1px solid black\" }}\n            onClick={()=>addContact()}\n          >\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default compose(\n  reduxForm({\n    form: \"Contactus\",\n    initialValues,\n  })\n)(ContactUsForm);"],"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"},"metadata":{},"sourceType":"module"}